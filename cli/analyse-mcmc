#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
sys.path.append('../src')

import pickle
import matplotlib.pyplot as plt

import params
from mcmc import Analysis

if __name__ != '__main__':
    sys.exit()

desc = """ 
       """

# Describe the arguments into the program. 
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-m', '--model', type=str, 
                    help='The name of a model to be used.')
parser.add_argument('-p', '--path', type=str, 
                    help='The path to the directory where pickled \
                          emcee.ensemble.EnsembleSampler objects are saved.')
parser.add_argument('-o', '--outputdir', type=str, default='../results/sampler', 
                    help='The path to the directory where results are saved.')
parser.add_argument('-d', '--discard', type=int, default=0, 
                    help='Discard the first "discard" steps in the chain as burn-in.')
parser.add_argument('-t', '--thin', type=int, default=1, 
                    help='Use only every "thin" steps from the chain')
parser.add_argument('-f', '--format', type=str, default='png', 
                    help='The format of the output files.')

# Pull the arguments
args = parser.parse_args()

# Define model
if args.model == 'SEIR_ODE':
    param = params.SeirOde()
else:
    raise ValueError('The model f"{args.model}" is not implemented.')

# Save path
dirname = os.path.basename(args.path)
savedir = os.path.join(args.outputdir, f'{dirname}_analysis')
subprocess.run(['mkdir', '-p', savedir])

# Analyse for each sampler in the directory
file_list = os.listdir(args.path)
for file in file_list:
    prefecture = file.split('.pickle')[0]
    with open(os.path.join(args.path, file), 'rb') as f:
        sampler = pickle.load(f)

    analysis = Analysis(sampler, discard=args.discard, thin=args.thin)
    
    # Scatter plot
    filename = f'{prefecture}_scatter.{args.format}'
    fig = plt.figure(figsize=(16, 16))
    fig = analysis.plot_scatter(fig, param.list)
    plt.savefig(os.path.join(savedir, filename), format=args.format)
