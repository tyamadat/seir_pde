#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import datetime
sys.path.append('../src')

import numpy as np
import pickle
import matplotlib.pyplot as plt

import iodata
import models
from mcmc import Fitting


if __name__ != '__main__':
    sys.exit()

desc = """ 
       """

# Describe the arguments into the program. 
parser = argparse.ArgumentParser(description=desc)
parser.add_argument('-m', '--model', type=str, 
                    help='The name of a model to be used.')
parser.add_argument('-t', '--title', type=str, default='', 
                    help='The description of the mcmc experiment. This is going to be \
                          the name of directory to be saved.')
parser.add_argument('-p', '--path', type=str, default='../data/20mar_21may.csv', 
                    help='The path to the data. This path is going to be the argument \
                          for io.load_data().')
parser.add_argument('-sp', '--sampler-path', type=str, default='../results/sampler', 
                    help='The path to the directory where samplers in each experiment \
                          is saved.')
parser.add_argument('-o', '--outputdir', type=str, default='../results/sampler_analysis', 
                    help='The path to the directory where results are saved.')
parser.add_argument('-pf', '--prefecture', type=str, default='Tokyo', 
                    help='The prefecture for which modeling is going to be conducted.')
parser.add_argument('-ms', '--metrics', type=str, default='aveNewTestedPositive', 
                    help='The metrics for which modeling is going to be conducted.')
parser.add_argument('-fd', '--first-day', type=int, default=0, 
                    help='The first day from which modeling is going to be conducted.')
parser.add_argument('-ld', '--last-day', type=int, default=50, 
                    help='The last day from which modeling is going to be conducted.')
parser.add_argument('-os', '--ode-step', type=int, default=1000, 
                    help='The resolution of a solution of ODEs.')
parser.add_argument('-d', '--discard', type=int, default=0, 
                    help='Discard the first "discard" steps in the chain as burn-in.')
parser.add_argument('-tn', '--thin', type=int, default=1, 
                    help='Use only every "thin" steps from the chain')
parser.add_argument('-pp', '--population-path', type=str, default='../data/population.csv', 
                    help='The path to the population data for each prefecture.')
parser.add_argument('-f', '--format', type=str, default='png', 
                    help='The format of the output files.')

# Pull the arguments
args = parser.parse_args()

# Load data
data = iodata.load_data(args.path, args.prefecture, args.metrics, (args.first_day, args.last_day))
population = iodata.load_population(args.population_path, args.prefecture)

# Load sampler
filename = f'{args.prefecture}.pickle'
with open(os.path.join(args.sampler_path, args.title, filename), 'rb') as f:
    sampler = pickle.load(f)

# Define t
duration = args.last_day - args.first_day
t = np.linspace(0, duration, duration*args.ode_step+1)

# Define model
if args.model == 'SEIR_ODE':
    model = models.SeirOde(
        prefecture=args.prefecture, 
        population=population, 
        calibration='PR', 
)
else:
    raise ValueError('The model f"{args.model}" is not implemented.')

# Create fitting object
fitting = Fitting(data, model, sampler, args.discard, args.thin)

# Save path
savedir = os.path.join(args.outputdir, args.title)
subprocess.run(['mkdir', '-p', savedir])

# Fitting curve
fitting_dir = os.path.join(savedir, 'fitting')
subprocess.run(['mkdir', '-p', fitting_dir])
fig, ax = plt.subplots(1, 1, figsize=(12, 8))
ax = fitting.plot_data(ax)
ax = fitting.plot_median(ax, t)
# ax = fitting.plot_credible_interval(ax, t)
plt.savefig(os.path.join(fitting_dir, f'{args.prefecture}.{args.format}'), format=args.format)
plt.clf()
plt.close()
